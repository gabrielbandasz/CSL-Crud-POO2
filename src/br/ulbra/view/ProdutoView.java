/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ulbra.view;

import br.ulbra.dao.FornecedorDAO;
import br.ulbra.dao.ProdutoDAO;
import br.ulbra.model.Fornecedor;
import br.ulbra.model.Produto;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aluno.saolucas
 */
public class ProdutoView extends javax.swing.JFrame {
    private Produto produtoEmEdicao;

    /**
     * Creates new form FornecedorView
     */
    public ProdutoView() {
        initComponents();
        listarProdutos();
        carregarFornecedores();
        limparCamposProduto();
        if (produtoEmEdicao != null && produtoEmEdicao.getFornecedor() != null) {
            selecionarFornecedorNoCombo(produtoEmEdicao.getFornecedor());
        }
    }

   private void carregarFornecedores() {
    try {
        FornecedorDAO dao = new FornecedorDAO();
        List<Fornecedor> fornecedores = dao.listar();

        DefaultComboBoxModel<Fornecedor> model = new DefaultComboBoxModel<>(
            fornecedores.toArray(new Fornecedor[0])
        );

        CbFornecedor.setModel(model);
        CbFornecedor.setSelectedIndex(-1);

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this,
            "Erro ao carregar fornecedores: " + ex.getMessage(),
            "Erro", JOptionPane.ERROR_MESSAGE);
    }
}


    private void selecionarFornecedorNoCombo(Fornecedor fSelecionado) {
        if (fSelecionado == null) {
            CbFornecedor.setSelectedIndex(-1);
            return;
        }
        int index = -1;
        for (int i = 0; i < CbFornecedor.getItemCount(); i++) {
            Object item = CbFornecedor.getItemAt(i);
            if (item instanceof Fornecedor) {
                Fornecedor fornecedorNoCombo = (Fornecedor) item;
                if (fornecedorNoCombo.getIdFor() == fSelecionado.getIdFor()) {
                    index = i;
                    break;
                }
            }
        }
        CbFornecedor.setSelectedIndex(index);
    }

    private void listarProdutos() {
        try {
            ProdutoDAO dao = new ProdutoDAO();
            List<Produto> lista = dao.listar();
            DefaultTableModel model = (DefaultTableModel) tbProduto.getModel();
            model.setRowCount(0);
            for (Produto p : lista) {
                String fornecedorNome = (p.getFornecedor() != null) ? p.getFornecedor().getNomeRazao() : "";
                model.addRow(new Object[]{
                    p.getId(),
                    p.getNome(),
                    fornecedorNome,
                    p.getPreco()
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao listar produtos: " + ex.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void limparCamposProduto() {
        TxtNomePro.setText("");
        TxtPreco.setText("");
        CbFornecedor.setSelectedIndex(-1);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TxtIdPro = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TxtNomePro = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TxtPreco = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbProduto = new javax.swing.JTable();
        BtnSalvarPro = new javax.swing.JButton();
        BtnEditarPro = new javax.swing.JButton();
        CbFornecedor = new javax.swing.JComboBox<>();
        BtnExcluirPro = new javax.swing.JButton();
        BtnListarPro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("PRODUTO");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("ID");

        TxtIdPro.setBackground(new java.awt.Color(255, 255, 255));
        TxtIdPro.setForeground(new java.awt.Color(0, 0, 0));
        TxtIdPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtIdProActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Nome Produto");

        TxtNomePro.setBackground(new java.awt.Color(255, 255, 255));
        TxtNomePro.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Fornecedor");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Preço");

        TxtPreco.setBackground(new java.awt.Color(255, 255, 255));
        TxtPreco.setForeground(new java.awt.Color(0, 0, 0));

        tbProduto.setBackground(new java.awt.Color(255, 255, 255));
        tbProduto.setForeground(new java.awt.Color(0, 0, 0));
        tbProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nome Produto", "Fornecedor", "Preço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbProduto);

        BtnSalvarPro.setBackground(new java.awt.Color(255, 255, 255));
        BtnSalvarPro.setForeground(new java.awt.Color(0, 0, 0));
        BtnSalvarPro.setText("SALVAR");
        BtnSalvarPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSalvarProActionPerformed(evt);
            }
        });

        BtnEditarPro.setBackground(new java.awt.Color(255, 255, 255));
        BtnEditarPro.setForeground(new java.awt.Color(0, 0, 0));
        BtnEditarPro.setText("EDITAR");
        BtnEditarPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEditarProActionPerformed(evt);
            }
        });

        CbFornecedor.setBackground(new java.awt.Color(255, 255, 255));
        CbFornecedor.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        CbFornecedor.setForeground(new java.awt.Color(0, 0, 0));
        CbFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbFornecedorActionPerformed(evt);
            }
        });

        BtnExcluirPro.setBackground(new java.awt.Color(255, 255, 255));
        BtnExcluirPro.setForeground(new java.awt.Color(0, 0, 0));
        BtnExcluirPro.setText("EXCLUIR");
        BtnExcluirPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnExcluirProActionPerformed(evt);
            }
        });

        BtnListarPro.setBackground(new java.awt.Color(255, 255, 255));
        BtnListarPro.setForeground(new java.awt.Color(0, 0, 0));
        BtnListarPro.setText("LISTAR");
        BtnListarPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnListarProActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(BtnSalvarPro, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BtnEditarPro, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BtnExcluirPro, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BtnListarPro, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2)
                            .addComponent(TxtIdPro, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(TxtNomePro)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CbFornecedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TxtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(236, 236, 236))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtIdPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtNomePro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CbFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnExcluirPro, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnListarPro, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnSalvarPro, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnEditarPro, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnListarProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnListarProActionPerformed
listarProdutos();
    }//GEN-LAST:event_BtnListarProActionPerformed

    private void TxtIdProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtIdProActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtIdProActionPerformed

    private void BtnSalvarProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSalvarProActionPerformed
          // 1) Ler valores da tela
    String nome = TxtNomePro.getText().trim();
    String precoStr = TxtPreco.getText().trim();
    Object selectedFornecedor = CbFornecedor.getSelectedItem();

    // 2) Validações básicas (nome, preço, fornecedor etc.)
    if (nome.isEmpty()) { /* ... */ return; }
    double preco;
    try {
        preco = Double.parseDouble(precoStr);
    } catch (NumberFormatException ex) {
        // ...
        return;
    }

    // 3) Passo 4: obter fornecedor selecionado
    Fornecedor fornecedor = null;
    if (selectedFornecedor instanceof Fornecedor) {
        fornecedor = (Fornecedor) selectedFornecedor;
    }
    if (fornecedor == null) {
        JOptionPane.showMessageDialog(this, "Selecione um fornecedor.");
        return;
    }

    // 4) Montar o produto com o fornecedor obtido (Passo 4)
    Produto p = new Produto();
    p.setNome(nome);
    p.setPreco(preco);
    p.setFornecedor(fornecedor);

    // 5) Persistir via DAO
    try {
        ProdutoDAO dao = new ProdutoDAO();
        dao.salvar(p);
        // Atualizar UI
        listarProdutos();
    } catch (Exception ex) {
        // tratamento de erro
    }
     }//GEN-LAST:event_BtnSalvarProActionPerformed

    private void BtnEditarProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEditarProActionPerformed
 try {
    // Se ainda não estivermos em modo edição, iniciar edição
    if (produtoEmEdicao == null) {
        int linha = tbProduto.getSelectedRow();
        if (linha < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Selecione um produto para editar");
            return;
        }

        Integer id = (Integer) tbProduto.getValueAt(linha, 0); // supondo que a coluna 0 é o ID

        ProdutoDAO dao = new ProdutoDAO();
        Produto p = dao.buscarPorId(id);
        if (p == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Produto não encontrado");
            return;
        }

        // Preenche os campos de edição com os valores atuais
        TxtIdPro.setText(String.valueOf(p.getId())); // se você tiver um TxtId
        TxtNomePro.setText(p.getNome());
        TxtPreco.setText(String.valueOf(p.getPreco()));

        Fornecedor f = p.getFornecedor();
        if (f != null) {
            int idx = -1;
            for (int i = 0; i < CbFornecedor.getItemCount(); i++) {
                Object item = CbFornecedor.getItemAt(i);
                if (item instanceof Fornecedor) {
                    Fornecedor ff = (Fornecedor) item;
                    if (ff.getIdFor() == f.getIdFor()) {
                        idx = i;
                        break;
                    }
                }
            }
            if (idx >= 0) CbFornecedor.setSelectedIndex(idx);
        } else {
            CbFornecedor.setSelectedIndex(-1);
        }

        // Marca o produto atual como em edição
        produtoEmEdicao = p;

        // Habilita campos para edição (se necessário) e atualiza UI
        TxtNomePro.setEnabled(true);
        TxtPreco.setEnabled(true);
        CbFornecedor.setEnabled(true);

        // Opcional: mudar o texto do botão para "Salvar" ou manter toggle
        // btnEditar.setText("Salvar alterações");
        // Se tiver um botão de salvar específico, habilite-o
        // btnSalvarEdicao.setEnabled(true);

        // Foco para o primeiro campo
        TxtNomePro.requestFocusInWindow();

        return; // sai do método aqui, agora o usuário edita e, na próxima ação, salva
    }

    // Se já estivermos em modo edição, salvamos as alterações (fluxo toggle)
    // 6) Coleta valores dos campos
    String novoNome = TxtNomePro.getText().trim();
    String precoStr = TxtPreco.getText().trim();
    double novoPreco;
    try {
        novoPreco = Double.parseDouble(precoStr);
    } catch (NumberFormatException nfe) {
        javax.swing.JOptionPane.showMessageDialog(this, "Preço inválido");
        return;
    }

    Fornecedor novoFornecedor = null;
    Object sel = CbFornecedor.getSelectedItem();
    if (sel instanceof Fornecedor) {
        novoFornecedor = (Fornecedor) sel;
    }

    // Atualiza o objeto em memória
    produtoEmEdicao.setNome(novoNome);
    produtoEmEdicao.setPreco(novoPreco);
    produtoEmEdicao.setFornecedor(novoFornecedor);

    // Persistência
    ProdutoDAO dao = new ProdutoDAO();
    dao.atualizar(produtoEmEdicao);

    javax.swing.JOptionPane.showMessageDialog(this, "Produto atualizado com sucesso");

    // Atualiza a tabela refletindo a edição
    listarProdutos();

    // Limpa o estado e esquemas de edição
    produtoEmEdicao = null;
    limparCamposProduto(); // ou resetarCamposEdicao(), conforme seu código
    // Opcional: resetar a UI
    // TxtNomePro.setText("");
    // TxtPreco.setText("");
    // CbFornecedor.setSelectedIndex(-1);

} catch (NumberFormatException nfe) {
    javax.swing.JOptionPane.showMessageDialog(this, "Selecione um produto para editar");
} catch (Exception ex) {
    javax.swing.JOptionPane.showMessageDialog(this, "Erro ao atualizar: " + ex.getMessage());

        }      }//GEN-LAST:event_BtnEditarProActionPerformed

    private void BtnExcluirProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnExcluirProActionPerformed
// Se ainda não estivermos em modo edição, iniciamos a edição  
    if (produtoEmEdicao == null) {  
        int linha = tbProduto.getSelectedRow();  
        if (linha < 0) {  
            JOptionPane.showMessageDialog(this, "Selecione um produto para editar.");  
            return;  
        }  

        Integer id = (Integer) tbProduto.getValueAt(linha, 0); // coluna 0 é o ID  

        try {  
            ProdutoDAO dao = new ProdutoDAO();  
            Produto p = dao.buscarPorId(id);  
            if (p == null) {  
                JOptionPane.showMessageDialog(this, "Produto não encontrado.");  
                return;  
            }  

            // Preenche os campos de edição com os valores atuais  
            TxtNomePro.setText(p.getNome());  
            TxtPreco.setText(String.valueOf(p.getPreco()));  

            Fornecedor f = p.getFornecedor();  
            if (f != null) {  
                int idx = -1;  
                for (int i = 0; i < CbFornecedor.getItemCount(); i++) {  
                    Object item = CbFornecedor.getItemAt(i);  
                    if (item instanceof Fornecedor) {  
                        Fornecedor ff = (Fornecedor) item;  
                        if (ff.getIdFor() == f.getIdFor()) {  
                            idx = i;  
                            break;  
                        }  
                    }  
                }  
                if (idx >= 0) CbFornecedor.setSelectedIndex(idx);  
            } else {  
                CbFornecedor.setSelectedIndex(-1);  
            }  

            // Marca como produto em edição  
            produtoEmEdicao = p;  

            // Habilita os campos de edição  
            TxtNomePro.setEnabled(true);  
            TxtPreco.setEnabled(true);  
            CbFornecedor.setEnabled(true);  

            // Você pode mudar o texto do botão para "Salvar edição" se tiver um único botão  
            // Ex.: btnEditarProduto.setText("Salvar edição");  
            // Foco no primeiro campo para facilitar a edição  
            TxtNomePro.requestFocusInWindow();  

        } catch (SQLException ex) {  
            JOptionPane.showMessageDialog(this, "Erro ao carregar produto: " + ex.getMessage(),  
                    "Erro", JOptionPane.ERROR_MESSAGE);  
        }  
        return; // encerra aqui para entrar no modo edição  
    }  

    // Caso já esteja em modo edição, salvamos as alterações  
    // 6) Coleta valores dos campos  
    String novoNome = TxtNomePro.getText().trim();  
    String precoStr = TxtPreco.getText().trim();  
    double novoPreco = 0.0;  
    try {  
        novoPreco = Double.parseDouble(precoStr);  
    } catch (NumberFormatException nfe) {  
        JOptionPane.showMessageDialog(this, "Preço inválido.");  
        return;  
    }  

    Fornecedor novoFornecedor = null;  
    Object sel = CbFornecedor.getSelectedItem();  
    if (sel instanceof Fornecedor) {  
        novoFornecedor = (Fornecedor) sel;  
    }  

    // Atualiza o objeto em memória  
    produtoEmEdicao.setNome(novoNome);  
    produtoEmEdicao.setPreco(novoPreco);  
    produtoEmEdicao.setFornecedor(novoFornecedor);  

    // Persistência  
    try {  
        ProdutoDAO dao = new ProdutoDAO();  
        dao.atualizar(produtoEmEdicao); // ajuste para o seu método (update/editar)  
        JOptionPane.showMessageDialog(this, "Produto atualizado com sucesso.");  

        // Atualiza a tabela refletindo a edição  
        carregarFornecedores(); // recarrega a lista e preenche tbProduto  
        produtoEmEdicao = null;

        // Opcional: resetar campos de edição e voltar ao modo leitura
        TxtNomePro.setText("");
        TxtPreco.setText("");
        CbFornecedor.setSelectedIndex(-1);

        // Se tiver, redefina o estado do botão (ex.: voltar para "Editar")
        // btnEditarProduto.setText("Editar");
        // Desabilite o salvar, se houver
        // btnSalvarEdicao.setEnabled(false);

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao atualizar produto: " + ex.getMessage(),
                "Erro", JOptionPane.ERROR_MESSAGE);
    }    }//GEN-LAST:event_BtnExcluirProActionPerformed

    private void CbFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbFornecedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CbFornecedorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProdutoView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProdutoView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProdutoView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProdutoView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProdutoView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnEditarPro;
    private javax.swing.JButton BtnExcluirPro;
    private javax.swing.JButton BtnListarPro;
    private javax.swing.JButton BtnSalvarPro;
    private javax.swing.JComboBox<Fornecedor> CbFornecedor;
    private javax.swing.JTextField TxtIdPro;
    private javax.swing.JTextField TxtNomePro;
    private javax.swing.JTextField TxtPreco;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbProduto;
    // End of variables declaration//GEN-END:variables
}
